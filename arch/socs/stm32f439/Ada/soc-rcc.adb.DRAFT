package body soc.rcc
   with spark_mode => off
is

   --
   -- Simple switch/case enabling of disabling the given peripheral RCC input
   -- line.
   -- This procedure abstract the RCC register structure.
   --
   procedure set_device_rcc(dev  : soc.devmap.t_peripheral_id;
                            mode : t_RCC_mode)
   is
      value : boolean;
   begin
      if mode = RCC_ENABLE then
         value := true;
      else
         value := false;
      end if;
      case dev is
         when DEV_NVIC =>
            return;
         -- AHB2 RCC register
         when DEV_RNG =>
            RCC.AHB2.RNGEN := value;
         when DEV_DCMI =>
            RCC.AHB2.DCMIEN := value;
         when DEV_CRYP =>
            RCC.AHB2.CRYPEN := value;
         when DEV_HASH =>
            RCC.AHB2.HASHEN := value;
         when DEV_USB_OTG_FS =>
            RCC.AHB2.OTGFSEN := value;
         -- AHB1 RCC register
         when DEV_GPIOA =>
            RCC.AHB1.GPIOAEN := value;
         when DEV_GPIOB =>
            RCC.AHB1.GPIOBEN := value;
         when DEV_GPIOC =>
            RCC.AHB1.GPIOCEN := value;
         when DEV_GPIOD =>
            RCC.AHB1.GPIODEN := value;
         when DEV_GPIOE =>
            RCC.AHB1.GPIOEEN := value;
         when DEV_GPIOF =>
            RCC.AHB1.GPIOFEN := value;
         when DEV_GPIOG =>
            RCC.AHB1.GPIOGEN := value;
         when DEV_GPIOH =>
            RCC.AHB1.GPIOAEN := value;
         when DEV_GPIOI =>
            RCC.AHB1.GPIOIEN := value;
         when DEV_USB_OTG_HS =>
            RCC.AHB1.OTGHSEN := value;
         when DEV_USB_OTG_HS_ULPI =>
            RCC.AHB1.OTGHSULPIEN := value;
         when DEV_CRC =>
            RCC.AHB1.CRCEN := value;
         when DEV_BKPSRAM =>
            RCC.AHB1.BKPSRAMEN := value;
         when DEV_DMA1 =>
            RCC.AHB1.DMA1EN := value;
         when DEV_DMA2 =>
            RCC.AHB1.DMA2EN := value;
         when DEV_ETH_MAC =>
            RCC.AHB1.ETHMACEN := value;
         when DEV_ETH_MAC_TX =>
            RCC.AHB1.ETHMACTXEN := value;
         when DEV_ETH_MAC_RX =>
            RCC.AHB1.ETHMACRXEN := value;
         when DEV_ETH_MAC_PTP =>
            RCC.AHB1.ETHMACPTPEN := value;
         -- APB1 RCC register
         when DEV_TIM2 =>
            RCC.APB1.TIM2EN := value;
         when DEV_TIM3 =>
            RCC.APB1.TIM3EN := value;
         when DEV_TIM4 =>
            RCC.APB1.TIM4EN := value;
         when DEV_TIM5 =>
            RCC.APB1.TIM5EN := value;
         when DEV_TIM6 =>
            RCC.APB1.TIM6EN := value;
         when DEV_TIM7 =>
            RCC.APB1.TIM7EN := value;
         when DEV_TIM12 =>
            RCC.APB1.TIM12EN := value;
         when DEV_TIM13 =>
            RCC.APB1.TIM13EN := value;
         when DEV_TIM14 =>
            RCC.APB1.TIM14EN := value;
         when DEV_WWDG =>
            RCC.APB1.WWDGEN := value;
         when DEV_SPI2 =>
            RCC.APB1.SPI2EN := value;
         when DEV_SPI3 =>
            RCC.APB1.SPI3EN := value;
         when DEV_USART2 =>
            RCC.APB1.USART2EN := value;
         when DEV_USART3 =>
            RCC.APB1.USART3EN := value;
         when DEV_UART4 =>
            RCC.APB1.UART4EN := value;
         when DEV_UART5 =>
            RCC.APB1.UART5EN := value;
         when DEV_I2C1 =>
            RCC.APB1.I2C1EN := value;
         when DEV_I2C2 =>
            RCC.APB1.I2C2EN := value;
         when DEV_I2C3 =>
            RCC.APB1.I2C3EN := value;
         when DEV_CAN1 =>
            RCC.APB1.CAN1EN := value;
         when DEV_CAN2 =>
            RCC.APB1.CAN2EN := value;
         when DEV_PWR =>
            RCC.APB1.PWREN := value;
         when DEV_DAC =>
            RCC.APB1.DACEN := value;
         when DEV_UART7 =>
            RCC.APB1.UART4EN := value;
         when DEV_UART8 =>
            RCC.APB1.UART5EN := value;
         -- APB2 RCC register
         when DEV_TIM1 =>
            RCC.APB2.TIM1EN := value;
         when DEV_TIM8 =>
            RCC.APB2.TIM8EN := value;
         when DEV_USART1 =>
            RCC.APB2.USART1EN := value;
         when DEV_USART6 =>
            RCC.APB2.USART6EN := value;
         when DEV_ADC1 =>
            RCC.APB2.ADC1EN := value;
         when DEV_ADC2 =>
            RCC.APB2.ADC2EN := value;
         when DEV_ADC3 =>
            RCC.APB2.ADC3EN := value;
         when DEV_SDIO =>
            RCC.APB2.SDIOEN := value;
         when DEV_SPI1 =>
            RCC.APB2.SPI1EN := value;
         when DEV_SYSCFG =>
            RCC.APB2.SYSCFGEN := value;
         when DEV_TIM9 =>
            RCC.APB2.TIM9EN := value;
         when DEV_TIM10 =>
            RCC.APB2.TIM10EN := value;
         when DEV_TIM11 =>
            RCC.APB2.TIM11EN := value;
      end case;
   end;

end soc.rcc;
